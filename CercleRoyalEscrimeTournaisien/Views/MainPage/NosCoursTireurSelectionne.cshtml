@model NosCoursTireurSelectionneModel
@{ 
    string stylePoules = Model.PoulesFormatted != null ?  Model.PoulesFormatted.Any() ? "display:inline-block;margin-left:20px;" : "display:none" : "display:none";
    var urlCategorie = @Url.Content("~/FileToUpload/NosCours/Liste des catégories et répartition des tireurs 2025 2026.pdf");
}
<head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://code.responsivevoice.org/responsivevoice.js?key=b08U7IYJ" id="responsive-voice-js"></script>
    <link rel="preload" href="https://responsivevoice.org/wp-content/plugins/w3-total-cache/pub/js/lazyload.min.js" as="script">
    <script src="https://responsivevoice.org/wp-content/cache/minify/818c0.js"></script>

    @*<script src="https://kit.fontawesome.com/5d93eb1089.js" ></script>*@
    @Styles.Render("~/styles/NosCoursCss")
    @Scripts.Render("~/bundles/NosCoursJS")
</head>

@Html.AntiForgeryToken()

<div style="text-align:right;">
    <i class="fa fa-bars fa-beat" onclick="ShowStartPage();" style="color: red; font-size: 30px;"></i>
</div>

<div style="font-size:16px;margin-bottom:5px;">

    <table>
        <tr>
            <td style=" width: 33%; text-align: left;">Explication sur les couleurs:</td>
            <td style=" width: 33%; text-align: center;">Tireuse/tireur : @Model.TireurSelectionne.UserName (@Model.Categorie)</td>
            <td style=" width: 33%; text-align: center;">Cliquer <a style="text-decoration:underline;" href="@urlCategorie" target="_blank">ici</a> pour avoir la liste des catégories de tous les tireurs du club</td>
        </tr>
        <tr>
            <td style="color:blue;">La couleur bleue est une observation.</td>
        </tr>
        <tr>
            <td style="color:green;">La couleur verte est un point positif.</td>
        </tr>
        <tr>
            <td style="color:red;">La couleur rouge est à améliorer.</td>
        </tr>



        @*<tr>
            <td style="width:25%;">
                <span style=" margin: 0 auto; display: block ">Explication sur les couleurs:</span>
                <span style=" margin: 0 auto; display: block; ">La couleur bleue est une observation.</span>
                <span style=" margin: 0 auto; display: block; ">La couleur verte est un point positif.</span>
                <span style=" margin: 0 auto; display: block; ">La couleur rouge est à améliorer.</span>
            </td>
            <td style="text-align:center">
                <span class="ClassTireurSelectionne" style="">Tireuse/tireur : @Model.TireurSelectionne.UserName (@Model.Categorie)</span>
            </td>
            <td style="text-align:center">
                <span style="color:black;margin-left:15px;">
                    Cliquer <a href="@urlCategorie" target="_blank">ici</a> pour avoir la liste des catégories de tous les tireurs du club
                </span>
            </td>
        </tr>
        <tr>
            <td></td>
            <td>
                <div style="@stylePoules">
                    <label>Poules terminées: </label>
                    @Html.DropDownListFor(model => model.PouleSelectionnee, new SelectList(Model.PoulesFormatted, "Key", "Value", Model.PouleSelectionnee), new { @class = "form-control", @id = "DropDownListForPoules", @title = "Sélectionnez la poule pour la télécharger. Seul les poules complètes sont mises en ligne." })
                </div>

            </td>
        </tr>*@
    </table>

    <!--<div style="color: black">-->

        @*<i style="margin-left:10px;color:black;" title="La couleur bleue est une observation. La couleur verte est un point positif. La couleur rouge est à améliorer." class="fa fa-info-circle" aria-hidden="true"></i></label>*@
    <!--</div>-->


    @*<div style="text-align: center; color: black">
            <label>Explication sur les couleurs<i style="margin-left:10px;color:black;" title="La couleur bleue est une observation. La couleur verte est un point positif. La couleur rouge est à améliorer." class="fa fa-info-circle" aria-hidden="true"></i></label>
            <label class="ClassTireurSelectionne" style="">Tireuse/tireur sélectionné(e) : @Model.TireurSelectionne.UserName (@Model.Categorie)</label>

            <div style="display:inline-block;margin-bottom:15px;">
                <label style="color:black;margin-left:15px;">
                    Liste des catégories des tireuses/tireurs
                    <i style="color:black;" onclick="window.open('@urlCategorie', '_blank')" class="fa fa-info-circle" aria-hidden="true"></i>
                </label>
            </div>

            <div style="@stylePoules">
                <label>Poules: </label>
                @Html.DropDownListFor(model => model.PouleSelectionnee, new SelectList(Model.PoulesFormatted, "Key", "Value", Model.PouleSelectionnee), new { @class = "form-control", @id = "DropDownListForPoules", @title = "Sélectionnez la poule pour la télécharger. Seul les poules complètes sont mises en ligne." })
            </div>
        </div>*@

    @foreach (var remarqueParDateNewLook in Model.RemarquesParDateNewLook)
    {
        <div class="row" style="display: flex; border-left: 6px solid goldenrod; border-bottom: 5px solid goldenrod; font-size: 20px; margin-left: 5px; margin-bottom: 28px; margin-top: 28px; width: 350px; ">
            <span style=" margin-left: 11px;">@remarqueParDateNewLook.DateRemarque.ToString("dd/MM/yyyy") - @remarqueParDateNewLook.Arme</span>

        </div>
        foreach (var remarqueData in remarqueParDateNewLook.RemarquesData)
        {
            //string textPositifOuNegatif = string.IsNullOrEmpty(remarqueData.PointPositif) ? remarqueData.PointNégatif : remarqueData.PointPositif;
            string textPositifOuNegatif = remarqueData.Remarque;
            string styleColor = remarqueData.PointPositifNégatifObservation == PointPositifNégatifObservationConstantes.PointPositifNégatifObservation.Positif ? "green" : remarqueData.PointPositifNégatifObservation == PointPositifNégatifObservationConstantes.PointPositifNégatifObservation.Négatif ? "red" : "blue";
            string styleDisplayVideo = remarqueData.HasUrlVideo ? "" : "display:none";
            string classDisplayVideo = remarqueData.HasUrlVideo ? "classDisplayVideo" : "";

            <div class="row" style="color:@styleColor;margin-top: 10px;margin-bottom: 10px;">
                <i title="Cliquez pour écouter le texte" onclick='LireTexte("@textPositifOuNegatif.Trim()", this, "True")' class="fa fa-headphones classPointPositifNegatif CursorIcon"></i>
                <i title="Regarder la vidéo" class="fa fa-video-camera CursorIcon @classDisplayVideo" style="@styleDisplayVideo" onclick='ChargerPopup("@remarqueData.UrlYoutubeVideo", "@textPositifOuNegatif");'></i>
                <i title="Téléchargez la vidéo" class="fa fa-download CursorIcon @classDisplayVideo" style="@styleDisplayVideo" onclick="window.location.href='@remarqueData.UrlVideo'"></i>
                <span>@Html.Raw(@textPositifOuNegatif)</span>
            </div>
        }
    }


    @*<button class="accordion">Le fleuret</button>
        <div class="ClassPanel">
            @foreach (var date in Model.RemarquesParDate)
            {
                switch (date.Arme)
                {
                    case TypeArme.Fleuret:
                        <label class="ClassDate">@date.DateRemarque.ToShortDateString()</label>
                        foreach (RemarqueData remarque in date.RemarquesData)
                        {
                            if (!string.IsNullOrEmpty(remarque.PointPositif))
                            {
                                @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointPositif, remarque)
                            }
                            else
                            {
                                @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointNegatif, remarque)
                            }
                        }
                        break;
                }
            }
        </div>*@

    @*<button class="accordion accordionMarginTop">L'épée</button>
        <div class="ClassPanel">
            @foreach (var date in Model.RemarquesParDate)
            {
                switch (date.Arme)
                {
                    case TypeArme.Epée:
                        <label class="ClassDate">@date.DateRemarque.ToShortDateString()</label>
                        foreach (var remarque in date.RemarquesData)
                        {
                            //string styleDisplayVideo = remarque.HasUrlVideo ? "width: 2%" : "display:none";

                            if (!string.IsNullOrEmpty(remarque.PointPositif))
                            {
                                @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointPositif, remarque)
                            }
                            else
                            {
                                @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointNegatif, remarque)
                            }
                        }
                        break;

                }
            }

        </div>*@

    @*<button class="accordion accordionMarginTop">Le sabre</button>
        <div class="ClassPanel">
            @foreach (var date in Model.RemarquesParDate)
            {
                switch (date.Arme)
                {
                    case TypeArme.Sabre:
                        <label class="ClassDate">@date.DateRemarque.ToShortDateString()</label>
                        foreach (var remarque in date.RemarquesData)
                        {
                            if (!string.IsNullOrEmpty(remarque.PointPositif))
                            {
                                @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointPositif, remarque)
                            }
                            else
                            {
                                @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointNegatif, remarque)
                            }
                        }
                        break;
                }
            }
        </div>*@

    @*<button class="accordion accordionMarginTop" style="margin-bottom:10px">Observations générales pour les tireuses et les tireurs </button>
        <div class="ClassPanel">
            @foreach (var date in Model.RemarquesPourTousLesTireursParDate)
            {
                foreach (var remarque in date.RemarquesData)
                {
                    @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointDAttentionPourTous, remarque)
                }
                break;
            }
        </div>*@

    <div>
        @{
            Html.RenderPartial("ModalPopup");
        }
    </div>
</div>

<script>
    ExpandCollapse();
    $(".fa-headphones").css('opacity', '0.1');
    $(".fa-headphones").css('point-event', 'none');
    $("body").css('overflow-y', 'scroll');

    setTimeout(function () {
        AdaptHeadPhone();
    }, 3700);

    responsiveVoice.cancel();
    responsiveVoice.resume();

    setTimeout(function () {
        responsiveVoice.cancel();
        responsiveVoice.resume();
    }, 4000);

    var acc = document.getElementsByClassName("accordion");
    for (var i = 0; i < acc.length; i++) {
        acc[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var panel = this.nextElementSibling;
            if (panel.style.display === "block") {
                panel.style.display = "none";
            } else {
                panel.style.display = "block";
            }
        });
    }


    function ChargerPopup(url, texteToShow) {        
        var modal = document.getElementById("myModal");
        modal.style.display = "block";
        $("#youtube-video").css('display', 'block');        

        createYoutubeiFrame("youtube-video", url);

        $("#youtube-video").prop('width', '95%');
        $("#youtube-video").prop('height', '95%');

        $("#labelTexte").text(texteToShow);
    }

    function createYoutubeiFrame(elementID, videoID) {        
        player = new YT.Player(elementID, {
            videoId: videoID,
            playerVars: {
                playsinline: 1,
            },
            events: {
                'onReady': playerReadyEvent,
            }
        });

        return player;
    }
    function playerReadyEvent(event) {
        event.target.playVideo();
        $("#labelEnChargement").css('display', 'none');
    }


    $(".close").click(function () {
        var modal = document.getElementById("myModal");
        modal.style.display = "none";

        var player = YT.get('youtube-video');
        if (player != undefined) {
            player.destroy();
        }
    });
    
    $('#DropDownListForPoules').change(function () {
        var item = $(this);
        if (item.val() == '') { return; }
        window.open(item.val(), '_blank');
    });
</script>