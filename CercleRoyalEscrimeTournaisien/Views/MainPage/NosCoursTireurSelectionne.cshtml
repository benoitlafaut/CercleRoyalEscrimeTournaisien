@model NosCoursTireurSelectionneModel

<head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://code.responsivevoice.org/responsivevoice.js?key=kvfbSITh" id="responsive-voice-js"></script>
    <link rel="preload" href="https://responsivevoice.org/wp-content/plugins/w3-total-cache/pub/js/lazyload.min.js" as="script">
    <script src="https://responsivevoice.org/wp-content/cache/minify/818c0.js"></script>

    @*<script src="https://kit.fontawesome.com/5d93eb1089.js" ></script>*@
    @Styles.Render("~/styles/NosCoursCss")
    @Scripts.Render("~/bundles/NosCoursJS")
</head>

@Html.AntiForgeryToken()

<div style="text-align:right;">
    <i class="fa fa-bars fa-beat" onclick="ShowStartPage();" style="color: red; font-size: 30px;"></i>
</div>

<div style="font-size:16px;margin-bottom:5px;">
    <div style="text-align: center; color: blue">
        <label class="ClassTireurSelectionne" style="">Tireuse/tireur sélectionné(e) : @Model.TireurSelectionne.UserName</label>
        <input id="buttonCollapseDevelopp" style="margin-right:15px;" type="button" value="Développer tout" onclick="ExpandCollapse();" />

        @Html.DropDownListFor(model => model.HasMale, new SelectList(Model.SpeakerList, "Key", "Value", Model.HasMale), new { @class = "form-control", @title = "Choisissez un homme ou une femme pour lire les textes." })
    </div>

    <button class="accordion">Le fleuret</button>
    <div class="ClassPanel">
        @foreach (var date in Model.RemarquesParDate)
        {
            switch (date.Arme)
            {
                case TypeArme.Fleuret:
                    <label class="ClassDate">@date.DateRemarque.ToShortDateString()</label>
                    foreach (RemarqueData remarque in date.RemarquesData)
                    {
                        if (!string.IsNullOrEmpty(remarque.PointPositif))
                        {
                            @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointPositif, remarque)
                        }
                        else
                        {
                            @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointNegatif, remarque)
                        }
                    }
                    break;
            }
        }
    </div>

    <button class="accordion accordionMarginTop">L'épée</button>
    <div class="ClassPanel">
        @foreach (var date in Model.RemarquesParDate)
        {
            switch (date.Arme)
            {
                case TypeArme.Epée:
                    <label class="ClassDate">@date.DateRemarque.ToShortDateString()</label>
                    foreach (var remarque in date.RemarquesData)
                    {
                        //string styleDisplayVideo = remarque.HasUrlVideo ? "width: 2%" : "display:none";

                        if (!string.IsNullOrEmpty(remarque.PointPositif))
                        {
                            @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointPositif, remarque)
                        }
                        else
                        {
                            @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointNegatif, remarque)
                        }
                    }
                    break;

            }
        }

    </div>

    <button class="accordion accordionMarginTop">Le sabre</button>
    <div class="ClassPanel">
        @foreach (var date in Model.RemarquesParDate)
        {
            switch (date.Arme)
            {
                case TypeArme.Sabre:
                    <label class="ClassDate">@date.DateRemarque.ToShortDateString()</label>
                    foreach (var remarque in date.RemarquesData)
                    {
                        if (!string.IsNullOrEmpty(remarque.PointPositif))
                        {
                            @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointPositif, remarque)
                        }
                        else
                        {
                            @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointNegatif, remarque)
                        }
                    }
                    break;
            }
        }
    </div>

    <button class="accordion accordionMarginTop" style="margin-bottom:10px">Observations générales pour les tireuses et les tireurs </button>
    <div class="ClassPanel">
        @foreach (var date in Model.RemarquesPourTousLesTireursParDate)
        {
            foreach (var remarque in date.RemarquesData)
            {
                @Html.Partial(PartialViewNames.NosCoursTireurSelectionnePointDAttentionPourTous, remarque)
            }
            break;
        }
    </div>

    <div>
    @{Html.RenderPartial("ModalPopup");}
    </div>
</div>

<script>
    ExpandCollapse();
    $(".fa-headphones").css('opacity', '0.1');
    $(".fa-headphones").css('point-event', 'none');
    $("body").css('overflow-y', 'scroll');

    setTimeout(function () {
        AdaptHeadPhone();
    }, 3700);

    responsiveVoice.cancel();
    responsiveVoice.resume();

    setTimeout(function () {
        responsiveVoice.cancel();
        responsiveVoice.resume();
    }, 4000);

    var acc = document.getElementsByClassName("accordion");
    for (var i = 0; i < acc.length; i++) {
        acc[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var panel = this.nextElementSibling;
            if (panel.style.display === "block") {
                panel.style.display = "none";
            } else {
                panel.style.display = "block";
            }
        });
    }


    function ChargerPopup(url, texteToShow) {        
        var modal = document.getElementById("myModal");
        modal.style.display = "block";
        $("#youtube-video").css('display', 'block');        

        createYoutubeiFrame("youtube-video", url);

        $("#youtube-video").prop('width', '95%');
        $("#youtube-video").prop('height', '95%');

        $("#labelTexte").text(texteToShow);
    }

    function createYoutubeiFrame(elementID, videoID) {        
        player = new YT.Player(elementID, {
            videoId: videoID,
            playerVars: {
                playsinline: 1,
            },
            events: {
                'onReady': playerReadyEvent,
            }
        });

        return player;
    }
    function playerReadyEvent(event) {
        event.target.playVideo();
        $("#labelEnChargement").css('display', 'none');
    }


    $(".close").click(function () {
        var modal = document.getElementById("myModal");
        modal.style.display = "none";

        var player = YT.get('youtube-video');
        if (player != undefined) {
            player.destroy();
        }
    });

</script>